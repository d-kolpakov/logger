//out.Data: false//v2: false//v13: false// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package stdout

import (
	json "encoding/json"
	logger "github.com/d-kolpakov/logger/v2"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson46f1aa61DecodeGithubComDKolpakovLoggerDriversStdout(in *jlexer.Lexer, out *stdoutMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "fstacktrace":
			out.FormattedStackTrace = string(in.String())
		case "request":
			out.Request = string(in.String())
		case "service_name":
			out.ServiceName = string(in.String())
		case "date":
			out.Time = string(in.String())
		case "message_type":
			out.MessageType = string(in.String())
		case "trace":
			out.Trace = string(in.String())
		case "source":
			out.Source = string(in.String())
		case "stacktrace":
			if in.IsNull() {
				in.Skip()
				out.Stacktrace = nil
			} else {
				if out.Stacktrace == nil {
					out.Stacktrace = new(logger.Stacktrace)
				}
				easyjson46f1aa61DecodeGithubComDKolpakovLogger(in, out.Stacktrace)
			}
		case "data":
			if m, ok := out.Data.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Data.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Data = in.Interface()
			}
		case "tags":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Tags = make(map[string]string)
				} else {
					out.Tags = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 string
					v1 = string(in.String())
					(out.Tags)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		case "extra":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Extra = make(map[string]interface{})
				} else {
					out.Extra = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v2 interface{}
					if m, ok := v2.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v2.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v2 = in.Interface()
					}
					(out.Extra)[key] = v2
					in.WantComma()
				}
				in.Delim('}')
			}
		case "user":
			if in.IsNull() {
				in.Skip()
				out.User = nil
			} else {
				if out.User == nil {
					out.User = new(logger.UserForLog)
				}
				(*out.User).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson46f1aa61EncodeGithubComDKolpakovLoggerDriversStdout(out *jwriter.Writer, in stdoutMsg) {
	out.RawByte('{')
	first := true
	_ = first
	if in.FormattedStackTrace != "" {
		const prefix string = ",\"fstacktrace\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.FormattedStackTrace))
	}
	if in.Request != "" {
		const prefix string = ",\"request\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Request))
	}
	{
		const prefix string = ",\"service_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ServiceName))
	}
	{
		const prefix string = ",\"date\":"
		out.RawString(prefix)
		out.String(string(in.Time))
	}
	{
		const prefix string = ",\"message_type\":"
		out.RawString(prefix)
		out.String(string(in.MessageType))
	}
	if in.Trace != "" {
		const prefix string = ",\"trace\":"
		out.RawString(prefix)
		out.String(string(in.Trace))
	}
	if in.Source != "" {
		const prefix string = ",\"source\":"
		out.RawString(prefix)
		out.String(string(in.Source))
	}
	if in.Stacktrace != nil {
		const prefix string = ",\"stacktrace\":"
		out.RawString(prefix)
		easyjson46f1aa61EncodeGithubComDKolpakovLogger(out, *in.Stacktrace)
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		if m, ok := in.Data.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Data.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Data))
		}
	}
	if len(in.Tags) != 0 {
		const prefix string = ",\"tags\":"
		out.RawString(prefix)
		{
			out.RawByte('{')
			v3First := true
			for v3Name, v3Value := range in.Tags {
				if v3First {
					v3First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v3Name))
				out.RawByte(':')
				out.String(string(v3Value))
			}
			out.RawByte('}')
		}
	}
	if len(in.Extra) != 0 {
		const prefix string = ",\"extra\":"
		out.RawString(prefix)
		{
			out.RawByte('{')
			v4First := true
			for v4Name, v4Value := range in.Extra {
				if v4First {
					v4First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v4Name))
				out.RawByte(':')
				if m, ok := v4Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v4Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v4Value))
				}
			}
			out.RawByte('}')
		}
	}
	if in.User != nil {
		const prefix string = ",\"user\":"
		out.RawString(prefix)
		(*in.User).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v stdoutMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson46f1aa61EncodeGithubComDKolpakovLoggerDriversStdout(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v stdoutMsg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson46f1aa61EncodeGithubComDKolpakovLoggerDriversStdout(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *stdoutMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson46f1aa61DecodeGithubComDKolpakovLoggerDriversStdout(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *stdoutMsg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson46f1aa61DecodeGithubComDKolpakovLoggerDriversStdout(l, v)
}
func easyjson46f1aa61DecodeGithubComDKolpakovLogger(in *jlexer.Lexer, out *logger.Stacktrace) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "frames":
			if in.IsNull() {
				in.Skip()
				out.Frames = nil
			} else {
				in.Delim('[')
				if out.Frames == nil {
					if !in.IsDelim(']') {
						out.Frames = make([]logger.Frame, 0, 0)
					} else {
						out.Frames = []logger.Frame{}
					}
				} else {
					out.Frames = (out.Frames)[:0]
				}
				for !in.IsDelim(']') {
					var v5 logger.Frame
					easyjson46f1aa61DecodeGithubComDKolpakovLogger1(in, &v5)
					out.Frames = append(out.Frames, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "frames_omitted":
			if in.IsNull() {
				in.Skip()
				out.FramesOmitted = nil
			} else {
				in.Delim('[')
				if out.FramesOmitted == nil {
					if !in.IsDelim(']') {
						out.FramesOmitted = make([]uint, 0, 8)
					} else {
						out.FramesOmitted = []uint{}
					}
				} else {
					out.FramesOmitted = (out.FramesOmitted)[:0]
				}
				for !in.IsDelim(']') {
					var v6 uint
					v6 = uint(in.Uint())
					out.FramesOmitted = append(out.FramesOmitted, v6)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson46f1aa61EncodeGithubComDKolpakovLogger(out *jwriter.Writer, in logger.Stacktrace) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Frames) != 0 {
		const prefix string = ",\"frames\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v7, v8 := range in.Frames {
				if v7 > 0 {
					out.RawByte(',')
				}
				easyjson46f1aa61EncodeGithubComDKolpakovLogger1(out, v8)
			}
			out.RawByte(']')
		}
	}
	if len(in.FramesOmitted) != 0 {
		const prefix string = ",\"frames_omitted\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v9, v10 := range in.FramesOmitted {
				if v9 > 0 {
					out.RawByte(',')
				}
				out.Uint(uint(v10))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson46f1aa61DecodeGithubComDKolpakovLogger1(in *jlexer.Lexer, out *logger.Frame) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "function":
			out.Function = string(in.String())
		case "symbol":
			out.Symbol = string(in.String())
		case "module":
			out.Module = string(in.String())
		case "package":
			out.Package = string(in.String())
		case "filename":
			out.Filename = string(in.String())
		case "abs_path":
			out.AbsPath = string(in.String())
		case "lineno":
			out.Lineno = int(in.Int())
		case "colno":
			out.Colno = int(in.Int())
		case "pre_context":
			if in.IsNull() {
				in.Skip()
				out.PreContext = nil
			} else {
				in.Delim('[')
				if out.PreContext == nil {
					if !in.IsDelim(']') {
						out.PreContext = make([]string, 0, 4)
					} else {
						out.PreContext = []string{}
					}
				} else {
					out.PreContext = (out.PreContext)[:0]
				}
				for !in.IsDelim(']') {
					var v11 string
					v11 = string(in.String())
					out.PreContext = append(out.PreContext, v11)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "context_line":
			out.ContextLine = string(in.String())
		case "post_context":
			if in.IsNull() {
				in.Skip()
				out.PostContext = nil
			} else {
				in.Delim('[')
				if out.PostContext == nil {
					if !in.IsDelim(']') {
						out.PostContext = make([]string, 0, 4)
					} else {
						out.PostContext = []string{}
					}
				} else {
					out.PostContext = (out.PostContext)[:0]
				}
				for !in.IsDelim(']') {
					var v12 string
					v12 = string(in.String())
					out.PostContext = append(out.PostContext, v12)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "in_app":
			out.InApp = bool(in.Bool())
		case "vars":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Vars = make(map[string]interface{})
				} else {
					out.Vars = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v13 interface{}
					if m, ok := v13.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v13.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v13 = in.Interface()
					}
					(out.Vars)[key] = v13
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson46f1aa61EncodeGithubComDKolpakovLogger1(out *jwriter.Writer, in logger.Frame) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Function != "" {
		const prefix string = ",\"function\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Function))
	}
	if in.Symbol != "" {
		const prefix string = ",\"symbol\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Symbol))
	}
	if in.Module != "" {
		const prefix string = ",\"module\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Module))
	}
	if in.Package != "" {
		const prefix string = ",\"package\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Package))
	}
	if in.Filename != "" {
		const prefix string = ",\"filename\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Filename))
	}
	if in.AbsPath != "" {
		const prefix string = ",\"abs_path\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AbsPath))
	}
	if in.Lineno != 0 {
		const prefix string = ",\"lineno\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Lineno))
	}
	if in.Colno != 0 {
		const prefix string = ",\"colno\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Colno))
	}
	if len(in.PreContext) != 0 {
		const prefix string = ",\"pre_context\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v14, v15 := range in.PreContext {
				if v14 > 0 {
					out.RawByte(',')
				}
				out.String(string(v15))
			}
			out.RawByte(']')
		}
	}
	if in.ContextLine != "" {
		const prefix string = ",\"context_line\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ContextLine))
	}
	if len(in.PostContext) != 0 {
		const prefix string = ",\"post_context\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v16, v17 := range in.PostContext {
				if v16 > 0 {
					out.RawByte(',')
				}
				out.String(string(v17))
			}
			out.RawByte(']')
		}
	}
	if in.InApp {
		const prefix string = ",\"in_app\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.InApp))
	}
	if len(in.Vars) != 0 {
		const prefix string = ",\"vars\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v18First := true
			for v18Name, v18Value := range in.Vars {
				if v18First {
					v18First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v18Name))
				out.RawByte(':')
				if m, ok := v18Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v18Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v18Value))
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}
